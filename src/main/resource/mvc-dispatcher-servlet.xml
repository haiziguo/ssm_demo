<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <context:component-scan base-package="com.lzp.ssm.controller">
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />-->
    </context:component-scan>
    <!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置
         mvc:annotation-driven默认加载很多的参数绑定方法，
         比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
         实际开发时使用mvc:annotation-driven
         -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <property name="converters">
            <list>
                <!-- 日期类型转换 -->
                <bean class="com.lzp.ssm.controller.converter.CustomDateConverter"/>
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>




    <!-- 校验器 -->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource" />
    </bean>
    <!-- 校验错误信息配置文件 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 资源文件名-->
        <property name="basenames">
            <list>
                <value>classpath:CustomValidationMessages</value>
            </list>
        </property>
        <!-- 资源文件编码格式 -->
        <property name="fileEncodings" value="utf-8" />
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120" />
    </bean>

    <!-- 全局异常处理器
只要实现HandlerExceptionResolver接口就是全局异常处理器
-->
    <bean class="com.lzp.ssm.exception.CustomExceptionResolver"></bean>





    <!-- 文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>

    <!--拦截器 -->
    <mvc:interceptors>
        <!--多个拦截器,顺序执行 -->
        <!-- 登陆认证拦截器 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.lzp.ssm.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <!-- /**表示所有url包括子url路径 -->
            <mvc:mapping path="/**"/>
            <bean class="com.lzp.ssm.interceptor.HandlerInterceptor1"></bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.lzp.ssm.interceptor.HandlerInterceptor2"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 静态资源解析
        包括 ：js、css、img、..
         -->
    <mvc:resources location="/js/" mapping="/js/**"/>
    <!--   配置Handler
    <bean id="itemsController" name="/queryItems.action" class="com.lzp.ssm.controller.ItemsController"/>
    &lt;!&ndash; 处理器映射器
    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)
     &ndash;&gt;
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

    &lt;!&ndash; 简单url映射&ndash;&gt;
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                &lt;!&ndash; 对 itemsController进行url映射&ndash;&gt;
                <prop key="/queryItems1.action">itemsController</prop>
                <prop key="/queryItems2.action">itemsController</prop>
            </props>
        </property>
    </bean>-->
</beans>